#! /usr/bin/env sh
## { alterEGO Linux: "Open the vault of knowledge" } ----------------------- ##
##                                                                           ##
## ~/.alterEGO/.functions                                                    ##
##   created        : 2021-05-25 19:40:20 UTC                                ##
##   updated        : 2021-12-11 11:08:28 UTC                                ##
##   description    : Shell functions to complement .egorc                   ##
## _________________________________________________________________________ ##

  busy() {
      ##### When the boss comes around to look busy.
      ##... ref. https://www.commandlinefu.com/commands/view/6663/pretend-to-be-busy-in-office-to-enjoy-a-cup-of-coffee
      ##... CTRL+c to quit.

      cat /dev/urandom                                                        \
      | hexdump -C                                                            \
      | grep --color=always 'ca fe'
  }

  cheat() {
      ##### Query https://cheat.sh.
      ##... Menu with `fzf` and display with `less`.

      cheat="$(curl -s cheat.sh/:list                                         \
              | fzf --layout="reverse"                                        \
                    --prompt='::'                                             \
                    --preview-window=up:80%                                   \
                    --preview 'cat <(curl -s cheat.sh/{})')"

      [[ -z ${cheat} ]] && exit 0

      curl -s cheat.sh/"${cheat}" | less -R
  }

  cleanHistory() {
      ##### Remove .bash_history entry.
      ##... Usage: `clean_history youtube-dl`
      ##... or `clean_history cd$`

      history -a
      cp ~/.bash_history /tmp/.clean_history
      sed -i "/^${1}/d" /tmp/.clean_history
      history -c                                                              \
      && history -r /tmp/.clean_history                                       \
      && history -w
      rm /tmp/.clean_history
      history
  }

  delete() {

      if [ -d "${1}" ]; then
        read -r -p $'\e[34m[-]\e[0m \e[1mAre you sure your want to delete this directory? [y/N]\e[0m ' response
          if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
            rm --recursive --force "${1}" 
          else
            printf "${COLOR_RED}[!]${COLOR_RESET} ${COLOR_BOLD}OK... Abording deletion!${COLOR_RESET}\n"
          fi
      else
        printf "${COLOR_RED}[!]${COLOR_RESET} ${COLOR_BOLD}There is nothing to do here!${COLOR_RESET}\n"
      fi
  }

  dirSize() {
      ##### Check size of biggest directories.

      printf "${COLOR_GREEN}[+]${COLOR_RESET} ${COLOR_BOLD}Size of current directory, followed by biggest child directories:\n${COLOR_RESET}"
      ##### du -bh --max-depth 1 | sort -rh | head
      du --bytes --human-readable --max-depth 1                               \
      | sort --reverse --human-numeric-sort                                   \
      | head
  }

  docker666() {
    ##### START/STOP docker service

    printf "%b\n" "${COLOR_GREEN}[+]${COLOR_RESET} ${COLOR_BOLD}Runing docker666() to check docker status...${COLOR_RESET}"

    case "${1}" in

      start )
        if [ $(systemctl is-active docker.service) = 'active' ]; then
          printf "%b\n" "${COLOR_RED}[!]${COLOR_RESET} ${COLOR_BOLD}Docker is already running...${COLOR_RESET}"
        else
          sudo systemctl start docker.service
          printf "%b\n" "${COLOR_BLUE}[-]${COLOR_RESET} ${COLOR_BOLD}Started docker.service...${COLOR_RESET}"
        fi
        ;;
      stop )
        read -r -p $'\e[34m[-]\e[0m \e[1mShould I stop docker service? [y/N]\e[0m ' response
          if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
            sudo systemctl stop docker.socket
            sudo systemctl stop docker.service
            read -r -p $'\e[34m[-]\e[0m \e[1mWould you like to delete docker0 network interface? [y/N]\e[0m ' response
              if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
                sudo ip link delete docker0 
              else
                printf "${COLOR_RED}[!]${COLOR_RESET} ${COLOR_BOLD}OK... docker0 lives!${COLOR_RESET}\n"
              fi
          else
            printf "${COLOR_RED}[!]${COLOR_RESET} ${COLOR_BOLD}OK...  docker.service still running...${COLOR_RESET}\n"
          fi
        ;;
      * )
        printf "%b\n" "${COLOR_RED}[!]${COLOR_RESET} ${COLOR_BOLD}Usage: docker666 [start|stop]${COLOR_RESET}"

    esac

  }

  dockerStats() {

      printf "%b\n" "CONTAIER ID\tIP ADDR   \tNAME"
      while read -r d; do
        _containerID=$(awk '{ print $1 }' <<< "${d}")
        _name=$(awk '{ print $2 }' <<< "${d}")
        _ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${_containerID})
        printf "%b\n" "${_containerID}\t${_ip}\t${_name}"
      done <<< $(docker ps | tail -n+2)
  }

  fixout() {
      ##### Fix history and exit.
      ##... Don't try to put this code in a shell script, it won't work.
      ##... `history` don't play well in scripts.

      history -n && history                                                   \
      | sort -k2 -k1nr                                                        \
      | uniq -f1                                                              \
      | sort -n                                                               \
      | cut -c8- > ~/.tmp$$                                                   \
      && history -c                                                           \
      && history -r ~/.tmp$$                                                  \
      && history -w                                                           \
      && rm ~/.tmp$$                                                          \
      && exit
  }

  fuck() {
      ##### Repeat last cmd with sudo if forgotten.

      sudo $(history -p !!)
  }

  gitall() {
      git pull && git add . && git commit && git push
  }

  gitstatus() {
      ##### Get status of local git repository.
      ##... ref. https://gist.github.com/giggio/1704664

      dumpfile="/tmp/git_status.dump"

      if [ -z ${1} ]; then
        local_git_repository=$(find ${HOME} -name ".git" -type d | grep -v /.cache/ | sed 's/.git//' | fzf)
      else
        local_git_repository=${1}
      fi
      
      cd ${local_git_repository}
      git fetch
      git status > ${dumpfile}
      printf "${COLOR_GREEN}[+]${COLOR_RESET} ${COLOR_BOLD}Checking local repository status for\n\t${local_git_repository}\n\n${COLOR_RESET}"
      cat ${dumpfile}
      untracked=$(grep "Untracked files" ${dumpfile});
      unstaged=$(grep "Changes not staged for commit" ${dumpfile});
      to_commit=$(grep "Changes to be committed" ${dumpfile});
      is_ahead=$(grep "Your branch is ahead of" ${dumpfile});
      is_behind=$(grep "Your branch is behind" ${dumpfile});
      if [[ -n "${untracked}" ]]; then
        printf "\n${COLOR_BLUE}[-]${COLOR_RESET} ${COLOR_BOLD}ADD Files to add to repo.${COLOR_RESET}\n"
      elif [[ -n ${unstaged} ]]; then
        printf "\n${COLOR_BLUE}[-]${COLOR_RESET} ${COLOR_BOLD}ADD Files to be staged.${COLOR_RESET}\n"
      elif [[ -n "${to_commit}" ]]; then
        printf "\n${COLOR_BLUE}[-]${COLOR_RESET} ${COLOR_BOLD}COMMIT Files to commit.${COLOR_RESET}\n"
      elif [[ -n "${is_ahead}" ]]; then
        printf "\n${COLOR_BLUE}[-]${COLOR_RESET} ${COLOR_BOLD}PUSH Time to push.${COLOR_RESET}\n"
      elif [[ -n "${is_behind}" ]]; then
        printf "\n${COLOR_BLUE}[-]${COLOR_RESET} ${COLOR_BOLD}PULL Time to pull.${COLOR_RESET}\n"
      else
        printf "\n${COLOR_BLUE}[-]${COLOR_RESET} ${COLOR_BOLD}STAY Nothing to do.${COLOR_RESET}\n"
      fi
  }

  heraser() {
      ##### Uses `fzf` to sort through the bash history and let you delete an 
      ##... entry.

      choices=$( history | grep --color=none "${@}" | fzf )
      [[ -z "${choices}" ]] && exit 1

      confirm=$(printf "yes\ncancel" | fzf)
      
      if [[ ${confirm} == 'yes' ]]; then
          to_delete=$(awk '{ print $1 }' <<< "${choices}")
          history -d ${to_delete}
      fi
  }

  ispeed() {
      ##### Test Internet speed.

      curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py \
      | python -
  }

  nmapBasic() {
      printf "%b\n" "${COLOR_BLUE}[-]${COLOR_RESET} ${COLOR_BOLD}Function <nmapBasic> is <sudo grc nmap -sV -O -sC --traceroute> ...${COLOR_RESET}"
      sleep 2
      sudo grc nmap -sV -O -sC --traceroute ${@}
  }

  nowutc() {

      echo  $(date --utc "+%F %H:%M:%S %Z")
  }

  ports() {

      printf "%b\n" "${COLOR_BLUE}[-]${COLOR_RESET} ${COLOR_BOLD}Function <ports> is <sudo netstat -tulanp> ...${COLOR_RESET}"
      sudo netstat -tulanp
  }

  psbasic() {

      printf "%b\n" "${COLOR_BLUE}[-]${COLOR_RESET} ${COLOR_BOLD}Function <ps-basic> is <ps aux> ...${COLOR_RESET}"
      ps aux
  }

  psgrep() {

      ps aux | grep -Ei "$@"
  }

  pyclean () {
    ##### ref. https://stackoverflow.com/a/41386937/10500496  
      find . -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete
  }

  pywebserver() {

      printf "%b\n" "${COLOR_BLUE}[-]${COLOR_RESET} ${COLOR_BOLD}Function <pywebserver> is <python -m http.server> ...${COLOR_RESET}"
      python -m http.server
  }

  tagalog() {

      wget -U "Mozilla/5.0" -qO - "http://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=tl&dt=t&q=${@}" \
      | awk -F '"' '{print $2}'                                               \
      | head -n 1
  }

  translate() {
    ##### Add language abbr after string to translate.
    ##... For example, translate "Hello world" fr

      wget -U "Mozilla/5.0" -qO - "http://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=${2}&dt=t&q=${1}" \
      | awk -F '"' '{print $2}'                                               \
      | head -n 1
  }

  tunsrc() {

      printf "%b\n" "INT\tIP ADDR   \tPID\tNAME"
      while read -r _interface; do

        _ip=$(grep -oP '(?<=inet )(.*)(?=/)' <<<"${_interface}")
        _tun=$(awk '{ print $NF }' <<<"${_interface}")
        _ps=$(sudo grep -r $_tun /proc/*/fdinfo 2>/dev/null | cut -d / -f 3)
        _cmd="$(ps -o cmd --no-headers ${_ps})"

        if [[ $(awk '/openvpn/ && /server/' <<< ${_cmd}) ]]; then
          _tunname="OpenVPNServer"
        elif [[ $(awk '/openvpn/ && /tryhackme/' <<< "${_cmd}") ]]; then
          _tunname="TryHackMe"
        else
          _tunname="UNDEFINED"
        fi

        printf "%b\n" "${_tun}\t${_ip}\t${_ps}\t${_tunname}"

      done <<< $(ip a | grep -E 'inet [1-9].*global.*(tun)')
  }

  viewips() {

      printf "%b\n" "${COLOR_GREEN}[+]${COLOR_RESET} ${COLOR_BOLD}Current IP addresses:${COLOR_RESET}"
      ip address | grep "inet [1-9]" | awk '{ print $NF "\t" $2 }'
  }

## [ LOADED ] -------------------------------------------------------------- ##

  loadedFunctions() {

      printf "${COLOR_GREEN}[+]${COLOR_RESET} ${COLOR_BOLD}.functions loaded @ $(date | sed 's/  / /g')...${COLOR_RESET}\n"
  }
  # loadedFunctions

## [ RELOAD ] -------------------------------------------------------------- ##

  reloadFunctions() {

      . "${HOME}/.alterEGO/.functions"
      loadedFunctions
  }

# vim: syntax=sh
## FIN _____________________________________________________________ ¯\_(ツ)_/¯
